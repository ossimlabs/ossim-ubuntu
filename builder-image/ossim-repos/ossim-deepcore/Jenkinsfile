properties([
    parameters ([
        string(name: 'BUILD_NODE', defaultValue: 'ossim-build', description: 'The build node to run on'),
        string(name: 'ARTIFACT_TYPE', defaultValue: 'centos-7', description: 'type of artifact to pull'),
        string(name: 'OSSIM_DATA', defaultValue: '/data/ossim-data-dev', description: 'OSSIM data directory (default to location on Jenkins dynamic node)'),
        string(name: 'OSSIM_GIT_BRANCH', defaultValue: 'dev', description: ''),
        string(name: 'DEEPCORE_GIT_BRANCH', defaultValue: 'dev', description: ''),
        booleanParam(name: 'CLEAN_WORKSPACE', defaultValue: true, description: 'Clean the workspace at the end of the run')
    ]),
    [$class: 'GithubProjectProperty', displayName: '', projectUrlStr: 'https://github.com/maxar-corp/ossim-deepcore'],
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '3', daysToKeepStr: '', numToKeepStr: '20')),
    disableConcurrentBuilds()
])

node ("${BUILD_NODE}")
{
   dockerEnv=""

   try{
      env.OSSIM_GIT_BRANCH ="${OSSIM_GIT_BRANCH}"
//       env.DOCKER_TAG="${BRANCH_NAME}"

      stage( "Download Artifacts" )
      {
          withCredentials([string(credentialsId: 'o2-artifact-project', variable: 'o2ArtifactProject')]) {
               step ([$class: "CopyArtifact",
                  projectName: o2ArtifactProject,
                  filter: "common-*.groovy",
                  flatten: true])
         }

         step ([$class: "CopyArtifact",
            projectName: "ossim-sandbox-docker-multibranch/${OSSIM_GIT_BRANCH}",
            filter: "ossim-base-build-${ARTIFACT_TYPE}.tgz",
            flatten: true])

         step ([$class: "CopyArtifact",
            projectName: "ossim-sandbox-ossimbuild-multibranch/${OSSIM_GIT_BRANCH}",
            filter: "ossim-sandbox-${ARTIFACT_TYPE}-runtime.tgz",
            flatten: true])

         step ([$class: "CopyArtifact",
            projectName: "ossim-sandbox-ossimbuild-multibranch/${OSSIM_GIT_BRANCH}",
            filter: "ossim-${ARTIFACT_TYPE}-dev.tgz",
            flatten: true])

         load "common-variables.groovy"
         commonFunctions = load "common-functions.groovy"
         dockerEnv = commonFunctions?.getDockerEnv()
      }

      stage("Checkout")
      {
         dir("ossim-sandbox"){
            git branch: "${OSSIM_GIT_BRANCH}",
            url: "${GIT_PUBLIC_SERVER_URL}/ossim-sandbox.git",
            credentialsId: "${CREDENTIALS_ID}"
         }

         dir("ossim-deepcore")
         {
            git branch: "${DEEPCORE_GIT_BRANCH}",
            url: "${GIT_PRIVATE_SERVER_URL}/ossim-deepcore.git",
            credentialsId: "${CREDENTIALS_ID}"
         }
      }

      stage("Load Build Image")
      {
         sh "docker load -i ${env.WORKSPACE}/ossim-base-build-${ARTIFACT_TYPE}.tgz"
      }

      stage("Build OSSIM DeepCore")
      {
         DOCKER_LABEL = "latest"
         if(OSSIM_GIT_BRANCH == "master") DOCKER_LABEL="release"
         else if(OSSIM_GIT_BRANCH != "dev" ) DOCKER_LABEL=OSSIM_GIT_BRANCH
         dockerEnv += "ARTIFACT_TYPE=${ARTIFACT_TYPE}\n"

         dir( "${ env.WORKSPACE }" )
         {
            writeFile file: "${env.WORKSPACE}/env.txt", text: dockerEnv

            sh """
                ossim-sandbox/docker-run.sh --env-file ${env.WORKSPACE}/env.txt \
                    ossim-base-build-${ARTIFACT_TYPE}:${DOCKER_LABEL} \
                    ossim-deepcore/scripts/build-deepcore-plugin.sh $ARTIFACT_TYPE
            """
         }
      }

//        stage("Build Docker Images") {
//            dir("ossim-deepcore/scripts") {
//                sh "./build-docker-image.sh -f"
//            }
//        }
//
//        stage("Push Docker Image") {
//            withCredentials([[$class: 'UsernamePasswordMultiBinding',
//                              credentialsId: 'mavenCredentials',
//                              usernameVariable: 'DOCKER_REGISTRY_USERNAME',
//                              passwordVariable: 'DOCKER_REGISTRY_PASSWORD']]) {
//
//                sh """
//                 docker login $DOCKER_REGISTRY_PRIVATE_UPLOAD_URL \
//                     --username=$DOCKER_REGISTRY_USERNAME \
//                     --password=$DOCKER_REGISTRY_PASSWORD
//
//                 docker tag ossim-run-context:$DOCKER_TAG $DOCKER_REGISTRY_PRIVATE_UPLOAD_URL/ossim-deepcore:$DOCKER_TAG
//                 docker push $DOCKER_REGISTRY_PRIVATE_UPLOAD_URL/ossim-deepcore:$DOCKER_TAG
//             """
//            }
//        }

      stage("Archive")
      {
         archiveArtifacts "ossim-deepcore-plugin-${ARTIFACT_TYPE}.tgz"
         archiveArtifacts "ossim-sandbox-with-deepcore-${ARTIFACT_TYPE}.tgz"

//          dir("ossim-deepcore/scripts") {
//              archiveArtifacts "ossim-run-context:${DOCKER_TAG}.tar"
         }
      }
   }
   finally
   {
      stage("Clean Workspace")
      {
         if ("${CLEAN_WORKSPACE}" == "true")
            step([$class: 'WsCleanup'])
      }
   }
}