properties([
    parameters ([
        string(name: 'DOCKER_REGISTRY_DOWNLOAD_URL', defaultValue: 'nexus-docker-private-group.ossim.io', description: 'Repository of docker images'),
        string(name: 'BUILD_NODE', defaultValue: 'omar-build', description: 'The build node to run on'),
        string(name: 'OSSIM_BRANCH', defaultValue: 'dev', description: 'The branch to use for ossim'),
        string(name: 'OSSIM_PLUGINS_BRANCH', defaultValue: 'dev', description: 'The branch to use for ossim plugins'),
        string(name: 'OSSIM_OMS_BRANCH', defaultValue: 'dev', description: 'The branch to use for ossim oms'),
        string(name: 'OSSIM_VIDEO_BRANCH', defaultValue: 'dev', description: 'The branch to use for ossim video'),
        string(name: 'OSSIM_DEEPCORE_BRANCH', defaultValue: 'dev', description: 'The branch to use for ossim deepcore'),
        string(name: 'OSSIM_BUILDER_VERSION', defaultValue: '1.0.1', description: 'The version of the ossim builder to be used'),
        booleanParam(name: 'CLEAN_WORKSPACE', defaultValue: true, description: 'Clean the workspace at the end of the run')

    ]),
    pipelineTriggers([
            [$class: "GitHubPushTrigger"]
    ]),
    [$class: 'GithubProjectProperty', displayName: '', projectUrlStr: 'https://github.com/ossimlabs/ossim-ubuntu-minimal.git'],
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '3', daysToKeepStr: '', numToKeepStr: '20')),
    disableConcurrentBuilds()
])
podTemplate(
    containers: [
    containerTemplate(
        name: 'git',
        image: 'alpine/git:latest',
        ttyEnabled: true,
        command: 'cat',
        envVars: [
            envVar(key: 'HOME', value: '/root')
        ]
    ),
    containerTemplate(
      name: 'docker',
      image: 'docker:19.03.8',
      ttyEnabled: true,
      command: 'cat',
      privileged: true
    ),
    containerTemplate(
      image: "${DOCKER_REGISTRY_DOWNLOAD_URL}/ossim-builder-minimal-ubuntu:${OSSIM_BUILDER_VERSION}",
      name: 'builder',
      command: 'cat',
      ttyEnabled: true
    )
  ],
  volumes: [
    hostPathVolume(
      hostPath: '/var/run/docker.sock',
      mountPath: '/var/run/docker.sock'
    )
  ]
)
{
timeout(time: 60, unit: 'MINUTES') {
    node(POD_LABEL){

        stage("Checkout")
        {
            checkout(scm)
        }

        stage("Load Variables")
        {
            withCredentials([string(credentialsId: 'o2-artifact-project', variable: 'o2ArtifactProject')]) {
                step ([$class: "CopyArtifact",
                    projectName: o2ArtifactProject,
                    filter: "common-variables.groovy",
                    flatten: true])
            }

            load "common-variables.groovy"
        }

        stage ("Checkout Source Code") 
        {  
            container('git'){  
                dir("compile-ossim"){
                    dir("ossim-repos/ossim-deepcore"){
                        git(
                            url: 'git@github.com:Maxar-Corp/ossim-deepcore.git',
                            credentialsId: 'ossimlabs-minion-ssh-key',
                            branch: "master"
                        )
                    }
                    sh """
                        apk update && apk add bash
                        ./checkout-ossim.sh
                        cd ossim-repos/ossim-deepcore
                        git checkout ${OSSIM_DEEPCORE_BRANCH}
                    """
                }
            }
        }  

        stage ("Build Ossim")
        {
            container('builder'){
                        sh """
                            mkdir /output
                            mv ./compile-ossim/ossim-repos/* /work
                            mv ./compile-ossim/build-scripts/* /build-scripts
                            cd /work
                            /build-scripts/build-ossim.sh
                            mv /output/ ${WORKSPACE}/compile-ossim/output/
                        """
                        archiveArtifacts "compile-ossim/output/ossim-dist-minimal-ubuntu.tgz"
            }
        }
        stage ("Build Runtime Image")
        {
            container('docker'){
                withDockerRegistry(credentialsId: 'dockerCredentials', url: "https://${DOCKER_REGISTRY_DOWNLOAD_URL}") {
                    dir("runtime") {
                        sh """
                            ./build-docker.sh --network=host
                        """
                    }
                }
            }
        }

        stage ("Publish Docker Image")
        {
            container('docker'){
                withDockerRegistry(credentialsId: 'dockerCredentials', url: "https://${DOCKER_REGISTRY_PRIVATE_UPLOAD_URL}") {
                    sh """
                        docker tag ossim-runtime-minimal-ubuntu:local ${DOCKER_REGISTRY_PRIVATE_UPLOAD_URL}/ossim-runtime-minimal-ubuntu:${OSSIM_BRANCH}
                        docker push ${DOCKER_REGISTRY_PRIVATE_UPLOAD_URL}/ossim-runtime-minimal-ubuntu:${OSSIM_BRANCH}
                    """
                }
            }
        }

        stage("Clean Workspace")
        {
            if ("${CLEAN_WORKSPACE}" == "true")
                step([$class: 'WsCleanup'])
        }
    }
}
}
